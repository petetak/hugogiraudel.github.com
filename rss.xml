

<rss version="2.0">
	<channel>
		<title>HugoGiraudel.com</title>
		<link>http://hugogiraudel.com</link>
		<description>I write about Sass. Mostly.</description>
		<language>en</language>
		<copyright>2014</copyright>
		
			

<item>
	<title>Feedback on dotCSS 2014</title>
	
	<link>http://hugogiraudel.com/2014/11/17/feedback-on-dotcss</link>
	<guid>/2014/11/17/feedback-on-dotcss</guid>
	
	
	<pubDate>Mon, 17 Nov 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;I have been invited to speak at the very first &lt;a href=&quot;http://dotcss.eu&quot;&gt;dotCSS&lt;/a&gt; in Paris on November 14th, as part of a beautiful lineup of incredible speakers and not less than 400 attendees. It was a truely great experience, hence a little article to sum up the journey.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;dotCSS logo&quot; src=&quot;/images/feedback-on-dotcss__logo.png&quot; class=&quot;pull-image--right&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;About the event&lt;/h2&gt;

&lt;p&gt;It was the first time that organisers of &lt;a href=&quot;https://twitter.com/dotconferences&quot;&gt;dotConferences&lt;/a&gt;, mostly famous for &lt;a href=&quot;http://dotjs.eu&quot;&gt;dotJS&lt;/a&gt; happening on November 17th, were producing a &lt;a href=&quot;http://dotcss.eu&quot;&gt;dotCSS&lt;/a&gt; and I have to say &lt;a href=&quot;https://twitter.com/sylvinus&quot;&gt;Sylvain Zimmer&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/ferdinandboas&quot;&gt;Ferdinand Boas&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/mauriz&quot;&gt;Maurice Svay&lt;/a&gt; (as well as all the people who helped) really did a great job with this one.&lt;/p&gt;

&lt;p&gt;I can’t tell for the attendees, but as as speaker I must say they took great care of me. Everything has been made so I, as for the others, don’t get under too much pressure once on stage and actually enjoy the experience. Challenge completed, more about that later on.&lt;/p&gt;

&lt;p&gt;Anyway, if you felt frisky coming to dotCSS this year because it was the first edition, be sure to come next year because it was so much fun!&lt;/p&gt;

&lt;h2&gt;About the stage&lt;/h2&gt;

&lt;p&gt;The conference happened at the &lt;a href=&quot;http://en.wikipedia.org/wiki/Th%C3%A9%C3%A2tre_des_Vari%C3%A9t%C3%A9s&quot;&gt;Théâtre des Variétés&lt;/a&gt; in Paris, a beautiful 19th century redish and goldish theatre with balconies, great lights and everything. It was absolutely gorgeous. The stage was not huge but definitely big enough to move a bit around. I think one could not dream of a best location to give a talk.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.dotcss.eu/images/bg.jpg&quot; alt=&quot;Théâtre des Variétés in Paris&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;About the talks&lt;/h2&gt;

&lt;p&gt;As I said, the lineup was really appealing. Quite impressive how a new event like dotCSS was able to gather so many talented people in the same room (note that I don’t necessarily include myself in this).&lt;/p&gt;

&lt;p&gt;The whole event was mono-track, meaning there is always a single speaker giving a presentation at a given time, which is much better this way if you ask me. And all talks were 18-minutes long.&lt;/p&gt;

&lt;p&gt;The 18-minutes format is probably one of the best if you ask me. Not only is time management much easier than for lightning talks (4-5 minutes) and long talks (45-60 minutes), but the audience is also much more receptive.&lt;/p&gt;

&lt;p&gt;I don’t think the attention-span for a talk is meant to last any longer than 30-something minutes. At some point, people just get bored. I feel like this point happens between 20 and 30 minutes; before if they are not interested in the topic, slightly after if the speaker is really good on stage.&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
&lt;img src=&quot;https://pbs.twimg.com/media/B2az8f5IEAAWaQY.jpg&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;All speakers and organisers. Photo by &lt;a href=&quot;https://twitter.com/ecarriou/status/533311468473954304/photo/1&quot;&gt;Erwan Carriou&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Anyway, allow me to give you a quick round-up.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/glazou&quot;&gt;Daniel Glazman&lt;/a&gt;, co-chairman at the CSS Working Group opened the stage with &lt;a href=&quot;http://disruptive-innovations.com/zoo/slides/20141114-dotCSS/dotCSS2014.pdf&quot;&gt;a talk about how CSS got there&lt;/a&gt;, what were the mistakes made, and why. I was not really familiar with Daniel’s work before the event so I found his talk very insightful. Plus, he really is talented speaker with great humour, thus I could not think of a better person to open the event.&lt;/p&gt;

&lt;p&gt;Then &lt;a href=&quot;https://twitter.com/kaelig&quot;&gt;Kaelig&lt;/a&gt;, French front-end developer previously at BBC and the Guardian, now at the Financial Times, presented a very interesting talk about &lt;a href=&quot;http://www.slideshare.net/kaelig/bridging-the-gap-between-designers-and-developers-at-the-guardian&quot;&gt;bridging the gap between designers and developers&lt;/a&gt; (essentially using Sass) in big teams such at The Guardian’s.&lt;/p&gt;

&lt;p&gt;Kaelig was followed by &lt;a href=&quot;https://twitter.com/csswizardry&quot;&gt;Harry Roberts&lt;/a&gt;, with probably the less technical talk of the day (but definitely not the least interesting!): &lt;a href=&quot;https://speakerdeck.com/csswizardry/ten-principles-for-effective-front-end-development&quot;&gt;Ten Principles for Front-End Development&lt;/a&gt;. In this case, Harry did apply it to CSS but it ended up being a very generic talk that could apply to many languages or even professions.&lt;/p&gt;

&lt;p&gt;Then there was some lightning talks that I did not really catch because I was backstage getting prepared, but I always have a profound respect to lightning speakers: I feel like time management is hell for so short presentations.&lt;/p&gt;

&lt;p&gt;I came next with a deck entitled &lt;a href=&quot;https://speakerdeck.com/hugogiraudel/keep-calm-and-write-sass&quot;&gt;Keep Calm And Write Sass&lt;/a&gt;. It was an 18 minutes talk about the do’s and don’ts of using Sass, especially the don’ts. My point was to try to get people focused on Sass main role: helping writing CSS, not making codebases more complex.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://twitter.com/estellevw&quot;&gt;Estelle Weyl&lt;/a&gt; then presented &lt;a href=&quot;http://estelle.github.io/doyouknowcss/&quot;&gt;CSS WTF&lt;/a&gt;, a collection of little known facts about CSS that ended up being quite technical actually. Counters in HTML forms, SVG animations, contenteditable attribute for head elements and much more. If you like clever stuff, have a look at her deck.&lt;/p&gt;

&lt;p&gt;After a second break, &lt;a href=&quot;https://twitter.com/necolas&quot;&gt;Nicolas Gallagher&lt;/a&gt; presented an insightful talk about &lt;a href=&quot;https://speakerdeck.com/necolas/making-twitter-ui-infrastructure&quot;&gt;scaling CSS&lt;/a&gt;, essentially based from his experience at Twitter. While not necessarily applicable right now in any project, it is interesting knowing how such a large-scale compary manage their CSS codebase.&lt;/p&gt;

&lt;p&gt;The inventor of CSS, &lt;a href=&quot;http://en.wikipedia.org/wiki/Bert_Bos&quot;&gt;Bert Bos&lt;/a&gt; came next with a presentation about typography on the web, and how HTML and CSS are currently poorly suited for it. What’s funny is that Bert actually ended up (implicitly) asking the audience how they would do it, rather than coming and saying “this is how it should be done”. Food for thoughts.&lt;/p&gt;

&lt;p&gt;Last but not least, &lt;a href=&quot;https://twitter.com/thebabydino&quot;&gt;Ana Tudor&lt;/a&gt; gave a talk about &lt;a href=&quot;http://codepen.io/thebabydino/full/1dac5e91f697438ea420d6f5b429c253&quot;&gt;shapes and CSS and Sass and geometry&lt;/a&gt; and craziness. Her scientific brain never fails to amuse me, and as always, her presentation was very impressive.&lt;/p&gt;

&lt;h2&gt;About my talk&lt;/h2&gt;

&lt;p&gt;It was my first talk in English, and as far as I can tell it went quite well. I felt absolutely no pressure thanks to the supporting organisers and speakers and everything went very smoothly.&lt;/p&gt;

&lt;p&gt;When I came up on stage, as for other speakers, I couldn’t see a single face in the audience. Lights were all turned to the stage, and the room was kept dark, so all I could see was bright (while not blinding) light.&lt;/p&gt;

&lt;p&gt;Interestingly enough, I realised that I feel much more confident when I don’t see people’s face. Seeing people is disturbing because you may assist to things that you don’t want to see in order to provide a clear talk.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;People that don’t give a fuck and are coding or reading Twitter. Those people make you wonder whether or not your talk is interesting and this is not the kind of things you should be thinking &lt;em&gt;while&lt;/em&gt; talking.&lt;/li&gt;
  &lt;li&gt;People that seem completely lost. While it can be helpful to know that some people can’t follow along because things are getting too technical, seeing those reactions directly put you back to the previous bullet: you’ll end up wondering whether your talk is good enough.&lt;/li&gt;
  &lt;li&gt;People that are smiling or laughing when there is nothing to laugh about. If their laugh is communicative, you could start laughing as well which is not that bad obviously but kind of breaks the flow. More importantly, you could start thinking they are making fun of you for some reason, and again this is not something you want to deal with.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So facing a black wall was actually much easier than expected. It allowed me to keep tracks of my thoughts without being disturbed. Loved it.&lt;/p&gt;

&lt;figure class=&quot;figure&quot;&gt;
&lt;img src=&quot;https://pbs.twimg.com/media/B2aR-97IEAAsVth.jpg&quot; alt=&quot;&quot; /&gt;
&lt;figcaption&gt;Me on stage. Photo by dotCSS.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Anyhow, things went great from what I can tell. There were two screens right below the stage, one with the timer, one mirroring the current slide (so speakers don’t have to turn their back to the audience); both helped a lot feeling safe on stage.&lt;/p&gt;

&lt;p&gt;Now as a non-native English speaker, who never spent more than 4 days in an English-speaking country, I obviously chocked a bit once or twice but overall I feel like my English was quite understandable. Plus, this is only about practice, so it can only get better over time.&lt;/p&gt;

&lt;p&gt;Among things I should pay attention to though:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;walking less. I end up having the same habits than when I’m on the phone: I keep walking around spinning.&lt;/li&gt;
  &lt;li&gt;watching the audience (a.k.a the black wall) more. Again, same as on the phone, I keep looking at the floor.&lt;/li&gt;
  &lt;li&gt;practicing the end of my talk. I think I could have managed to find some kind of punchline to have some impact when the talk is over.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Anyway, the event was really great, full of interesting talks and cool people. If there is another dotCSS next year, chances are high that you’ll see me there if I can attend it.&lt;/p&gt;

&lt;p&gt;If you missed my talk (or anyone’s talk actually), worry not because everything will be online in a couple of weeks. Meanwhile, you can have a look at my slidedeck; feel free to get in touch for any question. Also, special thanks to &lt;a href=&quot;https://twitter.com/komiska&quot;&gt;Jesterhead&lt;/a&gt; who designed the first slide for me.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;117e5ae04f2501329d875e31c290001e&quot; data-ratio=&quot;1.36898395721925&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</description>
</item>


<item>
	<title>Blogging: WordPress or Jekyll</title>
	
	<link>http://www.sitepoint.com/blogging-wordpress-or-jekyll/</link>
	<guid>http://www.sitepoint.com/blogging-wordpress-or-jekyll/</guid>
	
	
	<pubDate>Wed, 05 Nov 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Dealing with constants in Sass</title>
	
	<link>http://www.sitepoint.com/dealing-constants-sass/</link>
	<guid>http://www.sitepoint.com/dealing-constants-sass/</guid>
	
	
	<pubDate>Tue, 28 Oct 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Rethinking Atwood&#39;s law</title>
	
	<link>http://hugogiraudel.com/2014/10/27/rethinking-atwoods-law</link>
	<guid>/2014/10/27/rethinking-atwoods-law</guid>
	
	
	<pubDate>Mon, 27 Oct 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;A couple years ago, the 17th of July 2007 to be exact, &lt;a href=&quot;https://twitter.com/codinghorror&quot;&gt;Jeff Atwood&lt;/a&gt;, founder and builder of StackOverflow and StackExchange &lt;a href=&quot;http://blog.codinghorror.com/the-principle-of-least-power/&quot;&gt;wrote&lt;/a&gt; about the &lt;a href=&quot;http://www.w3.org/DesignIssues/Principles.html&quot;&gt;principle of least power&lt;/a&gt; and said:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[A]ny application that can be written in JavaScript, will eventually be written in JavaScript.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Not only is this quote famous by now, but it also turned to be quite true. JavaScript grew from this weird little nerd to the cool kid we all know it is today. What Jeff didn’t know back then perhaps, is how his law can apply to other things as well.&lt;/p&gt;

&lt;p&gt;That’s why today, I hope he won’t mind if I expand his thought to declare the revisited Atwood’s law (calling it Atwood-Giraudel would be quite presomptuous):&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[A]ny application that can be written in Sass, will eventually be written in Sass.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And given my obsession for Sass, I’ll go even further and add this extra part to the quote, even if it won’t ever be retained:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… and chances are high that it will be done by me.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Disclaimer: as for the original law from Jeff Atwood, it is obvious that Sass (or JavaScript) is not always the best choice: more often than not, things should be done in a different way, but the fact that we &lt;strong&gt;can&lt;/strong&gt; usually makes use &lt;strong&gt;do&lt;/strong&gt; it nevertheless.&lt;/em&gt;&lt;/p&gt;

&lt;h2&gt;Nonsense you say!&lt;/h2&gt;

&lt;p&gt;Sass is 7 years old if no mistake, and has come a long since its early days. In 7 years, and especially because of silly guys like me loving doing crazy shits, a lot of stuff has been made in Sass already. Let’s see:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://hugogiraudel.com/2014/01/20/json-in-sass/&quot;&gt;a JSON parser&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hugogiraudel.com/2014/06/22/bitwise-operators-in-sass/&quot;&gt;bitwise operators&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hugogiraudel.com/2014/03/18/sassy-sort/&quot;&gt;sorting algorithms&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sassmeister.com/gist/c36be3440dc2b5ae9ba2&quot;&gt;functional programming&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://sassmeister.com/gist/8334461&quot;&gt;Levenshtein distance implementation&lt;/a&gt;;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://thesassway.com/advanced/inverse-trigonometric-functions-with-sass&quot;&gt;inverse trigonometric functions&lt;/a&gt; by Ana Tudor…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And there are countless more examples I’m probably not even aware of.&lt;/p&gt;

&lt;h2&gt;How did we get there?&lt;/h2&gt;

&lt;blockquote class=&quot;pull-quote--right&quot;&gt;Challenge is fun.&lt;/blockquote&gt;

&lt;p&gt;I think the main reason is it’s challenging. Because Sass is a very limited language, doing advanced things can turn out to be quite challenging. And as we all know, challenge is fun.&lt;/p&gt;

&lt;p&gt;Aside from being fun to write, it actually helps a lot understanding the language. I would not be that skilled with Sass if I had stopped after declaring a couple of variables and functions. You don’t get good by doing what everybody does. You get good by pushing the limits.&lt;/p&gt;

&lt;p&gt;I think I could not stress this enough: try things folks. Do silly stuff. The only rule is to remember what is an experiment and what belongs to production code. Don’t use experimental/crazy code in a live code base. It doesn’t smell good.&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Any application that can be written in Sass, will eventually be written in Sass. And we are already close to the end.&lt;/p&gt;

</description>
</item>


<item>
	<title>Cubic Bézier representation in Sass</title>
	
	<link>http://thesassway.com/advanced/cubic-bezier-representation-in-sass</link>
	<guid>http://thesassway.com/advanced/cubic-bezier-representation-in-sass</guid>
	
	
	<pubDate>Mon, 27 Oct 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Building an ad manager with Symfony 2</title>
	
	<link>http://www.sitepoint.com/building-ad-manager-symfony-2/</link>
	<guid>http://www.sitepoint.com/building-ad-manager-symfony-2/</guid>
	
	
	<pubDate>Fri, 24 Oct 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Translation system in Sass</title>
	
	<link>http://hugogiraudel.com/2014/10/22/translation-system-in-sass</link>
	<guid>/2014/10/22/translation-system-in-sass</guid>
	
	
	<pubDate>Wed, 22 Oct 2014 00:00:00 GMT</pubDate>
	<description>
&lt;p&gt;Lately, I have been actively contributing to &lt;a href=&quot;https://github.com/ffoodd/a11y.css&quot;&gt;a11y.css&lt;/a&gt; project. If you don’t know it yet and happen to be interested in accessibility, I highly recommand you give it a glance. It is a massive work from French developer and accessibility activist &lt;a href=&quot;https://twitter.com/ffoodd_fr&quot;&gt;Gaël Poupard&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As far as I am concerned, I am no accessibility expert, so I always find this kind of initiatives very helpful. To briefly introduce a11y.css, it is a stylesheet that you can include in any web page to highlight possible mistakes, errors and improvements. Each notification comes with a message (displayed with pseudo-elements) explaining what’s going on and what should be done. Cool stuff, really.&lt;/p&gt;

&lt;p&gt;I thought it was too bad to keep it exclusively in French so I opened &lt;a href=&quot;https://github.com/ffoodd/a11y.css/issues/13&quot;&gt;an issue&lt;/a&gt; to suggest a Sass solution (project was already running on Sass anyway) to provide messages in different languages. I am very happy with what I have come up hence this article to explain how I did it.&lt;/p&gt;

&lt;h2&gt;Introducing the API&lt;/h2&gt;

&lt;p&gt;The goal was not to switch the whole thing to English. I think Gaël wanted to keep French and in the mean time provide an English version. So the idea was to find a way to generate a stylesheet per language. Feel like adding Spanish? Go for it, should be a breeze.&lt;/p&gt;

&lt;p&gt;My idea was to have a &lt;code&gt;.scss&lt;/code&gt; file per language, following a pattern like &lt;code&gt;a11y-&amp;lt;language&amp;gt;.scss&lt;/code&gt; for convenience that gets compiled into a &lt;code&gt;a11y-&amp;lt;language&amp;gt;.css&lt;/code&gt; file. This file shouldn’t contain much. Actually only:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;defining &lt;code&gt;@charset&lt;/code&gt; (obviously to &lt;code&gt;UTF-8&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;importing utilities (translation map, mixins, configuration…);&lt;/li&gt;
  &lt;li&gt;defining the language to use (as of today &lt;code&gt;fr&lt;/code&gt; or &lt;code&gt;en&lt;/code&gt;);&lt;/li&gt;
  &lt;li&gt;importing CSS styles.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For instance, &lt;code&gt;a11y-en.scss&lt;/code&gt; would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;@charset &quot;UTF-8&quot;;

@import &quot;utils/all&quot;;
@include set-locale(&quot;en&quot;);
@import &quot;a11y/a11y&quot;;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looking pretty neat, right?&lt;/p&gt;

&lt;h2&gt;Setting the language&lt;/h2&gt;

&lt;p&gt;You’ve seen from the previous code snippet that we have a &lt;code&gt;set-locale&lt;/code&gt; mixin accepting a language (shortcut) as a parameter. Let’s see how it works:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;/// Defines the language used by `a11y.css`. For now, only `fr` and `en` allowed.
/// @group languages
/// @param {String} $language
/// @output Nothing
/// @example scss - Defines the language to `fr`.
///  @include set-locale(&#39;fr&#39;);
@mixin set-locale($language) {
  $supported-languages: &#39;fr&#39;, &#39;en&#39;;
  $language: to-lower-case($language);

  @if not index($supported-languages, $language) {
    @error &quot;Language `#{$language}` is not supported. Pull request welcome!&quot;;
  }

  $language: $language !global;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There is very little done here. First, it makes sure the given language is supported. For now, only &lt;code&gt;fr&lt;/code&gt; and &lt;code&gt;en&lt;/code&gt; are. If it is not supported, it throws an error. Else, it creates a global variable called &lt;code&gt;$language&lt;/code&gt; containing the language (&lt;code&gt;fr&lt;/code&gt; or &lt;code&gt;en&lt;/code&gt;). Easy, let’s move on.&lt;/p&gt;

&lt;h2&gt;Gathering all messages within a map&lt;/h2&gt;

&lt;p&gt;The point of this system is to gather all messages within a big Sass map. Thus, we don’t have dozens of strings scattered across stylesheets. Every single message, no matter the language, lives inside the &lt;code&gt;$messages&lt;/code&gt; map. Then, we’ll have an accessor (a getter function) to retrieve a message from this map depending on the global language.&lt;/p&gt;

&lt;p&gt;Gaël has divided messages in different themes: &lt;code&gt;errors&lt;/code&gt;, &lt;code&gt;advices&lt;/code&gt; or &lt;code&gt;warnings&lt;/code&gt;. This is the first level of our map.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$messages: (
  &#39;errors&#39;: ( /* ... */ ),
  &#39;advices&#39;: ( /* ... */ ),
  &#39;warnings&#39;: ( /* ... */ )
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then each theme gets mapped to a sub-map (second level) containing keys for different situations. For instance, the &lt;code&gt;error&lt;/code&gt; telling that there a missing &lt;code&gt;src&lt;/code&gt; attribute on images:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;[src] attribute missing or empty. Oh, well…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;… is arbitrary named &lt;code&gt;no-src&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$messages: (
  &#39;errors&#39;: (
    &#39;no-src&#39;: ( /* ... */ )
  ),
  &#39;advices&#39;: ( /* ... */ ),
  &#39;warnings&#39;: ( /* ... */ )
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And finally, this key is mapped to another sub-map (third level) where each key is the language and each value the translation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$messages: (
  &#39;errors&#39;: (
    &#39;no-src&#39;: (
      &#39;fr&#39;: &#39;Attribut [src] manquant ou vide. Bon.&#39;,
      &#39;en&#39;: &#39;[src] attribute missing or empty. Oh, well…&#39;
    ),
    // ...
  ),
  &#39;advices&#39;: (
    // ...
  ),
  &#39;warnings&#39;: (
    // ...
  )
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However fetching &lt;code&gt;fr&lt;/code&gt; key from &lt;code&gt;no-src&lt;/code&gt; key from &lt;code&gt;errors&lt;/code&gt; key from &lt;code&gt;$messages&lt;/code&gt; map would look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$message: map-get(map-get(map-get($messages, &#39;errors&#39;), &#39;no-src&#39;), &#39;fr&#39;)));
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is both ugly and a pain in the ass to write. With a &lt;a href=&quot;https://github.com/ffoodd/a11y.css/blob/master/sass/utils/_functions.scss#L6-L12&quot;&gt;&lt;code&gt;map-deep-get&lt;/code&gt;&lt;/a&gt; function, we could shorten this to:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;$message: map-deep-get($messages, &#39;errors&#39;, &#39;no-src&#39;, &#39;fr&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Much better, isn’t it? Although having to type the language over and over is not very convenient. And we could also make sure &lt;code&gt;errors&lt;/code&gt; is a valid theme (which is the case) and &lt;code&gt;no-src&lt;/code&gt; is a valid key from theme &lt;code&gt;errors&lt;/code&gt; (which is also the case). To do all this, we need a little wrapper function. Let’s call it &lt;code&gt;message&lt;/code&gt;, in all its simplicity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;/// Retrieve message from series of keys
/// @access private
/// @param {String} $theme - Either `advice`, `error` or `warning`
/// @param {String} $key - Key to find message for
/// @requires $messages
/// @return {String} Message
@function message($theme, $key) {
  $locale: if(global-variable-exists(&#39;language&#39;), $language, &#39;en&#39;);

  @if not index(map-keys($messages), $theme) {
    @error &quot;Theme `#{$theme}` does not exist.&quot;;
  }

  @if not index(map-keys(map-get($messages, $theme)), $key) {
    @error &quot;No key `#{$key}` found for theme `#{$theme}`.&quot;;
  }

  @return map-deep-get($messages, $theme, $key, $locale);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;message&lt;/code&gt; function first deals with the language. If a global variable called &lt;code&gt;language&lt;/code&gt; exists — which is the case if &lt;code&gt;set-locale&lt;/code&gt; has been called — it uses it, else it falls back to &lt;code&gt;en&lt;/code&gt;. Then, it makes sure arguments are valid. Finally, it returns the result of &lt;code&gt;map-deep-get&lt;/code&gt; as we’ve seen above.&lt;/p&gt;

&lt;p&gt;So we could use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;img:not([src])::after {
    content: message(&#39;errors&#39;, &#39;no-src&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pretty cool! Although having to type &lt;code&gt;content&lt;/code&gt; everywhere could be avoided. Plus, Gaël uses &lt;code&gt;!important&lt;/code&gt; in order to make sure the messages are correctly being displayed. Let’s have a &lt;code&gt;message&lt;/code&gt; mixin wrapping around &lt;code&gt;message&lt;/code&gt; function!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;/// Get a message from the translation map based on the defined language.
/// The message contains the icon associated to the message type.
/// @group languages
/// @param {String} $theme - Theme name
/// @param {String} $key - Key name
/// @require {function} message
/// @output `content`, with `!important`
/// @example scss - Get message for `no-src` from `errors` category when language is set to `en`
/// .selector {
///   @include message(&#39;errors&#39;, &#39;no-src&#39;);
/// }
/// @example css - Resulting CSS
/// .selector {
///   content: &#39;[src] attribute missing or empty. Oh, well…&#39;;
/// }
@mixin message($theme, $key) {
  content: message($theme, $key) !important;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Same arguments. No logic. Nothing but the &lt;code&gt;content&lt;/code&gt; property with &lt;code&gt;!important&lt;/code&gt;. Thus we would use it like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-scss&quot;&gt;img:not([src])::after {
    @include message(&#39;errors&#39;, &#39;no-src&#39;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re done. It’s over!&lt;/p&gt;

&lt;h2&gt;Final thoughts&lt;/h2&gt;

&lt;p&gt;Cases where we need a translation system in Sass are close to zero, but for a11y.css this work proves to be useful after all. Adding a new language, for instance German, is as easy as adding a &lt;code&gt;de&lt;/code&gt; key to all messages in the &lt;code&gt;$messages&lt;/code&gt; map, and adding &lt;code&gt;de&lt;/code&gt; to &lt;code&gt;$supported-languages&lt;/code&gt; within &lt;code&gt;set-locale&lt;/code&gt; mixin.&lt;/p&gt;

&lt;p&gt;That’s it! Anyway, have a look at &lt;a href=&quot;http://ffoodd.github.io/a11y.css&quot;&gt;a11y.css&lt;/a&gt;, contribute to this awesome project and share the love!&lt;/p&gt;
</description>
</item>


<item>
	<title>Debugging Sass maps</title>
	
	<link>http://www.sitepoint.com/debugging-sass-maps/</link>
	<guid>http://www.sitepoint.com/debugging-sass-maps/</guid>
	
	
	<pubDate>Wed, 22 Oct 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Building a Step Wizard with BEM and Sass</title>
	
	<link>http://www.sitepoint.com/building-step-wizard-bem-sass/</link>
	<guid>http://www.sitepoint.com/building-step-wizard-bem-sass/</guid>
	
	
	<pubDate>Thu, 02 Oct 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>


<item>
	<title>Beware of selector nesting in Sass</title>
	
	<link>http://www.sitepoint.com/beware-selector-nesting-sass/</link>
	<guid>http://www.sitepoint.com/beware-selector-nesting-sass/</guid>
	
	
	<pubDate>Thu, 25 Sep 2014 00:00:00 GMT</pubDate>
	<description>
</description>
</item>

		
	</channel>
</rss>
